(function() {var implementors = {};
implementors["compile"] = [{"text":"impl Clone for CompileError","synthetic":false,"types":[]},{"text":"impl Clone for CompileErrorType","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for ListLiteral","synthetic":false,"types":[]},{"text":"impl Clone for TupleLiteral","synthetic":false,"types":[]},{"text":"impl Clone for SetLiteral","synthetic":false,"types":[]},{"text":"impl Clone for DictLiteral","synthetic":false,"types":[]},{"text":"impl Clone for FuncCall","synthetic":false,"types":[]},{"text":"impl Clone for AttrLookup","synthetic":false,"types":[]},{"text":"impl Clone for MethodCall","synthetic":false,"types":[]},{"text":"impl Clone for IndexedExpr","synthetic":false,"types":[]},{"text":"impl Clone for SlicedExpr","synthetic":false,"types":[]},{"text":"impl Clone for Expr","synthetic":false,"types":[]},{"text":"impl Clone for PPOVariant","synthetic":false,"types":[]},{"text":"impl Clone for PostPreOp","synthetic":false,"types":[]},{"text":"impl Clone for AnonFuncDefinition","synthetic":false,"types":[]},{"text":"impl Clone for ForLoop","synthetic":false,"types":[]},{"text":"impl Clone for WhileLoop","synthetic":false,"types":[]},{"text":"impl Clone for IfStatement","synthetic":false,"types":[]},{"text":"impl Clone for IfTail","synthetic":false,"types":[]},{"text":"impl Clone for CaseOf","synthetic":false,"types":[]},{"text":"impl Clone for FuncDefinition","synthetic":false,"types":[]},{"text":"impl Clone for ReturnStatement","synthetic":false,"types":[]},{"text":"impl Clone for ShStatement","synthetic":false,"types":[]},{"text":"impl Clone for FormatString","synthetic":false,"types":[]},{"text":"impl Clone for AssignmentLHS","synthetic":false,"types":[]},{"text":"impl Clone for Assignment","synthetic":false,"types":[]},{"text":"impl Clone for Statement","synthetic":false,"types":[]},{"text":"impl Clone for StatementList","synthetic":false,"types":[]},{"text":"impl Clone for Identifier","synthetic":false,"types":[]}];
implementors["lexer"] = [{"text":"impl Clone for LexError","synthetic":false,"types":[]},{"text":"impl Clone for MiscParseError","synthetic":false,"types":[]},{"text":"impl Clone for Tok","synthetic":false,"types":[]}];
implementors["mlrefcell"] = [{"text":"impl Clone for BorrowMutError","synthetic":false,"types":[]},{"text":"impl Clone for AlreadyLockedError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Clone&gt; Clone for MLRefCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["runtime"] = [{"text":"impl Clone for DebugSymbol","synthetic":false,"types":[]},{"text":"impl Clone for Op","synthetic":false,"types":[]},{"text":"impl Clone for RuntimeError","synthetic":false,"types":[]},{"text":"impl Clone for RuntimeErrorType","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for MemoryBacking&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Range","synthetic":false,"types":[]},{"text":"impl Clone for Lines","synthetic":false,"types":[]},{"text":"impl Clone for Chars","synthetic":false,"types":[]},{"text":"impl Clone for Map","synthetic":false,"types":[]},{"text":"impl Clone for MapIterator","synthetic":false,"types":[]},{"text":"impl Clone for Filter","synthetic":false,"types":[]},{"text":"impl Clone for FilterIterator","synthetic":false,"types":[]},{"text":"impl Clone for CharObject","synthetic":false,"types":[]},{"text":"impl Clone for Slice","synthetic":false,"types":[]},{"text":"impl Clone for HashableObjectRef","synthetic":false,"types":[]},{"text":"impl Clone for ObjectRef","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for ObjectCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ObjectCell&lt;T&gt;: Object,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()