use std::str::FromStr;
use crate::ast::*;
use crate::lexer::*;
use crate::error::*;
use codespan::Span;

grammar;

pub Program: StatementList = "\n"? <s: StatementList> => s;

Statement: Statement = {
	<f: ForLoop> => Statement::ForLoop(f),
	<w: WhileLoop> => Statement::WhileLoop(w),
	<f: IfStatement>  => Statement::IfStatement(f),
	<c: CaseOf>  => Statement::CaseOf(c),
	<re: ReturnStatement>  => Statement::ReturnStatement(re),
	<s: ShStatement> => Statement::ShStatement(s),
	<f: FuncDefinition>  => Statement::FuncDefinition(f),
	<a: Assignment>  => Statement::Assignment(a),
	<e: Expr>  => Statement::Expr(e),
};

FuncDefinition: FuncDefinition = <l:@L> "func" <id: Identifier> "(" <args: Comma<Identifier>> ")" "\n"? "{" "\n" <body: StatementList> "}" <r:@R> => FuncDefinition::new(
	id,
	args,
	body,
	l,
	r,
);

StatementList: StatementList = <l:@L> <v: Newline<Statement>> <r:@R> => StatementList::new(
	v,
	l,
	r,
);

Assignment: Assignment = {
	<l: @L> <n: AssignmentLHS> "=" <e: Expr> <r:@R> => Assignment::new(n, e, l, r),
	<l: @L> <n: AssignmentLHS> "+=" <e: Expr> <r:@R> => Assignment::new(
		n.clone(),
		Expr::FuncCall(FuncCall::new(
			Identifier::new("<add>".to_string(), l, r),
			vec![n.as_expr(), e],
			l, r
		)),
		l, r
	),
	<l: @L> <n: AssignmentLHS> "-=" <e: Expr> <r:@R> => Assignment::new(
		n.clone(),
		Expr::FuncCall(FuncCall::new(
			Identifier::new("<sub>".to_string(), l, r),
			vec![n.as_expr(), e],
			l, r
		)),
		l, r
	),
	<l: @L> <n: AssignmentLHS> "*=" <e: Expr> <r:@R> => Assignment::new(
		n.clone(),
		Expr::FuncCall(FuncCall::new(
			Identifier::new("<mul>".to_string(), l, r),
			vec![n.as_expr(), e],
			l, r
		)),
		l, r
	),
	<l: @L> <n: AssignmentLHS> "/=" <e: Expr> <r:@R> => Assignment::new(
		n.clone(),
		Expr::FuncCall(FuncCall::new(
			Identifier::new("<div>".to_string(), l, r),
			vec![n.as_expr(), e],
			l, r
		)),
		l, r
	),
	<l: @L> <n: AssignmentLHS> "%=" <e: Expr> <r:@R> => Assignment::new(
		n.clone(),
		Expr::FuncCall(FuncCall::new(
			Identifier::new("<mod>".to_string(), l, r),
			vec![n.as_expr(), e],
			l, r
		)),
		l, r
	),
};

AssignmentLHS: AssignmentLHS = {
	<n: Identifier> => AssignmentLHS::Identifier(n),
	<a: AttrLookup> => AssignmentLHS::AttrLookup(a),
	<a: IndexedExpr> => AssignmentLHS::Indexed(a),
};

ReturnStatement: ReturnStatement = <l:@L> "return" <e: Expr> <r:@R> => ReturnStatement::new(e, l, r);

ShStatement: ShStatement = <l:@L> <s:sh_statement> <r:@R> =>? Ok(ShStatement {
	span: Span::new(l as u32, r as u32),
	inner: FormatString::new(s.0, s.1, l, r)?,
});

WhileLoop: WhileLoop = <l:@L> "while" <e: Expr> "\n"? "{" "\n"? <body: StatementList> "}" <r:@R> => WhileLoop::new(e, body, l, r);

ForLoop: ForLoop = <l:@L> "for" <n: Identifier> "in" <e: Expr> "\n"? "{" "\n"? <body: StatementList> "}" <r:@R> => ForLoop::new(n, e, body, l, r);

CaseOf: CaseOf = <l:@L> "case" <e: Expr> "of" "\n"? "{" "\n"? <c: CommaNewline<Case>> "}" <r:@R> => CaseOf::new(e, c, l, r);

Case: (Expr, StatementList) = {
	<l:@L> <e: Expr> "=>" <s: Statement> <r:@R> => (e, StatementList::new(vec![s], l, r)),
	<e: Expr> "=>" "\n"? "{" "\n"? <s: StatementList> "}" => (e, s),
};

IfStatement: IfStatement = {
	<l:@L> "if" <e: Expr> "\n"? "{" "\n"? <b1: StatementList> "}" <r:@R> => IfStatement::new(
		e, b1, None, l, r,
	),
	<l:@L> "if" <e: Expr> "\n"? "{" "\n"? <b1: StatementList> "}" "else" "\n"? "{" "\n"? <b2: StatementList> "}" <r:@R> => IfStatement::new(
		e, b1, Some(IfTail::Else(b2)), l, r,
	),
	<l:@L> "if" <e: Expr> "\n"? "{" "\n"? <b1: StatementList> "}" <etail: ElifTail> <r:@R> => IfStatement::new(
		e, b1, Some(IfTail::ElseIf(Box::new(etail))), l, r,
	),
};

ElifTail: IfStatement = {
	<l:@L> "elif" <e: Expr> "\n"? "{" "\n"? <b1: StatementList> "}" <r:@R> => IfStatement::new(
		e, b1, None, l, r,
	),
	<l:@L> "elif" <e: Expr> "\n"? "{" "\n"? <b1: StatementList> "}" "else" "\n"? "{" "\n"? <b2: StatementList> "}" <r:@R> => IfStatement::new(
		e, b1, Some(IfTail::Else(b2)), l, r,
	),
	<l:@L> "elif" <e: Expr> "\n"? "{" "\n"? <b1: StatementList> "}" <etail: ElifTail> <r:@R> => IfStatement::new(
		e, b1, Some(IfTail::ElseIf(Box::new(etail))), l, r,
	),
};

pub Expr: Expr =  <e: LogicalExpr> => e;

LogicalExpr: Expr = {
	<b: Comparison> => b,
	<l:@L> "!" <s1: Comparison> <r:@R> => Expr::FuncCall(FuncCall::new(
		Identifier::new("<not>".to_string(), l, r),
		vec![s1],
		l, r,
	)),
	<l:@L> <s1: Comparison> "||" <s2: LogicalExpr> <r:@R> => Expr::FuncCall(FuncCall::new(
		Identifier::new("<or>".to_string(), l, r),
		vec![s1, s2],
		l, r,
	)),
	<l:@L> <s1: Comparison> "&&" <s2: LogicalExpr> <r:@R> => Expr::FuncCall(FuncCall::new(
		Identifier::new("<and>".to_string(), l, r),
		vec![s1, s2],
		l, r,
	)),
};

Comparison: Expr = {
	<b: Sum> => b,
	<l:@L> <s1: Sum> "<=" <s2: Sum> <r:@R> => Expr::FuncCall(FuncCall::new(
		Identifier::new("<leq>".to_string(), l, r),
		vec![s1, s2],
		l, r,
	)),
	<l:@L> <s1: Sum> ">=" <s2: Sum> <r:@R> => Expr::FuncCall(FuncCall::new(
		Identifier::new("<geq>".to_string(), l, r),
		vec![s1, s2],
		l, r,
	)),
	<l:@L> <s1: Sum> "<" <s2: Sum> <r:@R> => Expr::FuncCall(FuncCall::new(
		Identifier::new("<lt>".to_string(), l, r),
		vec![s1, s2],
		l, r,
	)),
	<l:@L> <s1: Sum> ">" <s2: Sum> <r:@R> => Expr::FuncCall(FuncCall::new(
		Identifier::new("<gt>".to_string(), l, r),
		vec![s1, s2],
		l, r,
	)),
	<l:@L> <s1: Sum> "==" <s2: Sum> <r:@R> => Expr::FuncCall(FuncCall::new(
		Identifier::new("<eq>".to_string(), l, r),
		vec![s1, s2],
		l, r,
	)),
	<l:@L> <s1: Sum> "!=" <s2: Sum> <r:@R> => Expr::FuncCall(FuncCall::new(
		Identifier::new("<neq>".to_string(), l, r),
		vec![s1, s2],
		l, r,
	)),
};

Sum: Expr = {
	<b: Term> => b,
	<l:@L> <t1: Term> "+" <t2: Sum> <r:@R> => Expr::FuncCall(FuncCall::new(
		Identifier::new("<add>".to_string(), l, r),
		vec![t1, t2],
		l, r,
	)),
	<l:@L> <t1: Term> "-" <t2: Sum> <r:@R> => Expr::FuncCall(FuncCall::new(
		Identifier::new("<sub>".to_string(), l, r),
		vec![t1, t2],
		l, r,
	)),
};

Term: Expr = {
	<b: BaseExpr> => b,
	<l:@L> <f1: BaseExpr> "*" <f2: Term> <r:@R> => Expr::FuncCall(FuncCall::new(
		Identifier::new("<mul>".to_string(), l, r),
		vec![f1, f2],
		l, r,
	)),
	<l:@L> <f1: BaseExpr> "%" <f2: Term> <r:@R> => Expr::FuncCall(FuncCall::new(
		Identifier::new("<mod>".to_string(), l, r),
		vec![f1, f2],
		l, r,
	)),
	<l:@L> <f1: BaseExpr> "/" <f2: Term> <r:@R> => Expr::FuncCall(FuncCall::new(
		Identifier::new("<div>".to_string(), l, r),
		vec![f1, f2],
		l, r,
	)),
};

BaseExpr: Expr = {
	<a: AttrableExpr> => a,
	<p: PreOp> => Expr::PostPreOp(p),
	<l:@L> "-" <t: AttrableExpr> <r:@R> => Expr::FuncCall(FuncCall::new(
		Identifier::new("<neg>".to_string(), l, r),
		vec![t],
		l, r,
	)),
};

AttrableExpr: Expr = {
	"(" <e:Expr> ")" => e,
	<s: Identifier> => Expr::Variable(s),
	<l: Literal> => Expr::Literal(l),
	<l: ListLiteral> => Expr::ListLiteral(l),
	<t: TupleLiteral> => Expr::TupleLiteral(t),
	<m: MethodCall> => Expr::MethodCall(m),
	<f: FuncCall> => Expr::FuncCall(f),
	<a: AttrLookup> => Expr::AttrLookup(a),
	<i: IndexedExpr> => Expr::IndexedExpr(i),
	<s: SlicedExpr> => Expr::SlicedExpr(s),
	<p: PostOp> => Expr::PostPreOp(p),
};

PostOp: PostPreOp = {
	<l:@L> <a: AttrableExpr> "++" <r:@R> =>? Ok(PostPreOp::new_post_inc(AssignmentLHS::from_expr(a).ok_or(
		MiscParseError::post_pre_op(l, r)
	)?, l, r)),
	<l:@L> <a: AttrableExpr> "--" <r:@R> =>? Ok(PostPreOp::new_post_dec(AssignmentLHS::from_expr(a).ok_or(
		MiscParseError::post_pre_op(l, r)
	)?, l, r)),
};

PreOp: PostPreOp = {
	<l:@L> "++" <a: AttrableExpr> <r:@R> =>? Ok(PostPreOp::new_pre_inc(AssignmentLHS::from_expr(a).ok_or(
		MiscParseError::post_pre_op(l, r)
	)?, l, r)),
	<l:@L> "--" <a: AttrableExpr> <r:@R> =>? Ok(PostPreOp::new_pre_dec(AssignmentLHS::from_expr(a).ok_or(
		MiscParseError::post_pre_op(l, r)
	)?, l, r)),
};

IndexedExpr: IndexedExpr = <l:@L> <b: AttrableExpr> "[" <i: Expr> "]" <r:@R> => IndexedExpr::new(b, i, l, r);

SlicedExpr: SlicedExpr = {
	<l:@L> <b: AttrableExpr> "[" <s: Expr?> ":" <e: Expr?> "]" <r:@R> => SlicedExpr::new(b, s, e, None, l, r),
	<l:@L> <b: AttrableExpr> "[" <s: Expr?> ":" <e: Expr?> ":" <st: Expr> "]" <r:@R> => SlicedExpr::new(b, s, e, Some(st), l, r),
};

Literal: Literal = {
	<l:@L> <n:int_lit> <r:@R> => Literal::Integer(n, Span::new(l as u32, r as u32)),
	<l:@L> <f:float_lit> <r:@R> => Literal::Float(f, Span::new(l as u32, r as u32)),
	<l:@L> <s:string_lit> <r:@R> => Literal::Str(s, Span::new(l as u32, r as u32)),
	<l:@L> <b:bool_lit> <r:@R> => Literal::Bool(b, Span::new(l as u32, r as u32)),
	<l:@L> <c:char_lit> <r:@R> => Literal::Char(c, Span::new(l as u32, r as u32)),
	<l:@L> <s:format_string_lit> <r:@R> =>? Ok(Literal::FormatString(FormatString::new(s.0, s.1, l, r)?)),
};

ListLiteral: ListLiteral = <l:@L> "[" <v: Comma<Expr>> "]" <r:@R> => ListLiteral::new(v, l, r);

TupleLiteral: TupleLiteral = <l:@L> "(" <v: CommaNonEmpty<Expr>> ")" <r:@R> => TupleLiteral::new(v, l, r);

Identifier: Identifier = <l:@L> <s:ident> <r:@R> => Identifier::new(s.to_owned(), l, r);


MethodCall: MethodCall = <l:@L> <e: AttrableExpr> "." <i: Identifier> "(" <args: Comma<Expr>> ")" <r:@R> => MethodCall::new(e, i, args, l, r);

FuncCall: FuncCall = <l:@L> <i: Identifier> "(" <args: Comma<Expr>> ")" <r:@R> => FuncCall::new(i, args, l, r);

AttrLookup: AttrLookup = <l:@L> <e: AttrableExpr>  "." <i: Identifier> <r:@R> => AttrLookup::new(e, i, l, r);

Comma<T>: Vec<T> = {
	<v:(<T> ",")*> <e:T?> => match e {
		None => v,
		Some(e) => {
			let mut v = v;
			v.push(e);
			v
		}
	}
};

Newline<T>: Vec<T> = {
	<v:(<T> "\n")*> => v,
};

CommaNewline<T>: Vec<T> = {
	<v:(<T> "," "\n")*> <e:T?> => match e {
		None => v,
		Some(e) => {
			let mut v = v;
			v.push(e);
			v
		}
	}
};

CommaNonEmpty<T>: Vec<T> = {
	<v:(<T> ",")+> <e:T?> => match e {
		None => v,
		Some(e) => {
			let mut v = v;
			v.push(e);
			v
		}
	}
};

extern {
	type Location = usize;
	type Error = MiscParseError;

	enum Tok {
		"\n" => Tok::Newline,
		"[" => Tok::OpenBracket,
		"]" => Tok::CloseBracket,
		"{" => Tok::OpenBrace,
		"}" => Tok::CloseBrace,
		"(" => Tok::OpenParen,
		")" => Tok::CloseParen,
		"," => Tok::Comma,
		"." => Tok::Dot,
		"=" => Tok::SingleEq,
		"=>" => Tok::Rarrow,
		"*" => Tok::Mult,
		"/" => Tok::Divide,
		"+" => Tok::Plus,
		"-" => Tok::Minus,
		"%" => Tok::Mod,
		":" => Tok::Colon,
		">" => Tok::Greater,
		"<" => Tok::Lesser,
		"!=" => Tok::Neq,
		"<=" => Tok::Leq,
		">=" => Tok::Geq,
		"==" => Tok::DoubleEq,
		"!" => Tok::Not,
		"||" => Tok::Or,
		"&&" => Tok::And,
		"+=" => Tok::AddAssign,
		"-=" => Tok::SubAssign,
		"*=" => Tok::MulAssign,
		"/=" => Tok::DivAssign,
		"%=" => Tok::ModAssign,
		"++" => Tok::DoublePlus,
		"--" => Tok::DoubleMinus,
		ident => Tok::Identifier(<String>),
		int_lit => Tok::Int(<i64>),
		float_lit => Tok::Float(<f64>),
		bool_lit => Tok::Bool(<bool>),
		char_lit => Tok::CharLit(<char>),
		string_lit => Tok::StringLit(<String>),
		format_string_lit => Tok::FormatStringLit(<String>, <Vec<(usize, String)>>),
		sh_statement => Tok::ShStatement(<String>, <Vec<(usize, String)>>),
		"if" => Tok::If,
		"then" => Tok::Then,
		"else" => Tok::Else,
		"elif" => Tok::Elif,
		"for" => Tok::For,
		"in" => Tok::In,
		"while" => Tok::While,
		"case" => Tok::Case,
		"of" => Tok::Of,
		"func" => Tok::Func,
		"return" => Tok::Return,
	}
}
